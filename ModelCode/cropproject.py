# -*- coding: utf-8 -*-
"""CropProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MMn7YCa6u9sTGEaa2g0Zzxg_1RA3YUou
"""

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.optimizers import Adam

early_blight_path = '/content/Tomato_Early_blight'
late_blight_path = '/content/Tomato_Late_blight'
spider_mite_path = '/content/Tomato_Spider_mites_Two_spotted_spider_mite'

IMG_SIZE = 224
EPOCHS = 15
MODEL_SAVE_PATH = 'model/tomato_disease_model.h5'

def load_images_from_folder(folder_path, label):
    images = []
    labels = []
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
            img = cv2.imread(file_path)
            if img is not None:
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
                images.append(img)
                labels.append(label)
    return images, labels

X_early, y_early = load_images_from_folder(early_blight_path, label=0)
X_late, y_late = load_images_from_folder(late_blight_path, label=1)
X_spider, y_spider = load_images_from_folder(spider_mite_path, label=2)

X = np.array(X_early + X_late + X_spider)
y = np.array(y_early + y_late + y_spider)

print(f"Total Images Loaded: {len(X)}")
print(f"Class distribution: Early={len(y_early)}, Late={len(y_late)}, Spider={len(y_spider)}")

X = X.astype('float32') / 255.0
y = tf.keras.utils.to_categorical(y, num_classes=3)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, shuffle=True, stratify=y
)

print(f"Train Samples: {len(X_train)}, Test Samples: {len(X_test)}")

base_model = MobileNetV2(
    input_shape=(IMG_SIZE, IMG_SIZE, 3),
    include_top=False,
    weights='imagenet'
)

base_model.trainable = False

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.3)(x)
predictions = Dense(3, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=predictions)

model.compile(
    optimizer=Adam(learning_rate=0.0001),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

history = model.fit(
    X_train, y_train,
    epochs=EPOCHS,
    validation_data=(X_test, y_test),
    batch_size=32
)

base_model.trainable = True
fine_tune_at = 100
for layer in base_model.layers[:fine_tune_at]:
    layer.trainable = False

model.compile(
    optimizer=Adam(learning_rate=1e-5),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

model.fit(
    X_train, y_train,
    epochs=5,
    validation_data=(X_test, y_test),
    batch_size=32
)

os.makedirs(os.path.dirname(MODEL_SAVE_PATH), exist_ok=True)
model.save(MODEL_SAVE_PATH)
print(f"\nModel saved to: {MODEL_SAVE_PATH}")

loss, acc = model.evaluate(X_test, y_test)
print(f"\nTest Accuracy: {acc*100:.2f}%")